# Project: adams
# Date: 2020-09-02 16:39:14
# User: fracpete
# Charset: UTF-8
# Modules: adams-compress,adams-core,adams-event,adams-imaging,adams-json,adams-meta,adams-net,adams-rats-core,adams-spreadsheet,adams-terminal,adams-ufdl-core,adams-ufdl-image,adams-xml
#
adams.flow.control.Flow -annotation "For managing users, teams, projects and licenses.\\nUses host/user/password from the global UFDL Preferences." -error-handling ACTORS_DECIDE_TO_STOP_ON_ERROR -flow-execution-listener adams.flow.execution.NullListener -flow-restart-manager adams.flow.control.flowrestart.NullManager
 adams.flow.standalone.CallableActors
  adams.flow.sink.Display -name Info -short-title true -display-type adams.flow.core.displaytype.Default -writer adams.data.io.output.NullWriter
  adams.flow.sink.HistoryDisplay -name Errors -short-title true -display-type adams.flow.core.displaytype.Default -y -3
  adams.flow.sink.ProgressBar -display-type adams.flow.core.displaytype.Default -writer adams.gui.print.NullWriter -max @{max}
  adams.flow.sink.SpreadSheetDisplay -name Current -short-title true -display-type adams.flow.core.displaytype.Default -height 600 -x -3 -cell-rendering-customizer adams.gui.core.spreadsheettable.DefaultCellRenderingCustomizer -allow-search true -writer adams.data.io.output.NullWriter -preview "adams.gui.core.spreadsheetpreview.SimpleText -missing-value N/A"
  adams.flow.control.Tee -name "clear output"
   adams.flow.control.ClearCallableDisplay -name "clear info" -callable Info
   adams.flow.control.CloseCallableDisplay -name "close info" -callable Info
   adams.flow.control.ClearCallableDisplay -name "clear errors" -callable Errors
   adams.flow.control.CloseCallableDisplay -name "close errors" -callable Errors
   adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
   adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
  adams.flow.control.Trigger -name "add team members" -annotation "adds team members to the team \\\"team\\\" in storage"
   adams.flow.source.Start
   adams.flow.transformer.SetVariable -var-name add_members -var-value true
   adams.flow.control.WhileLoop -condition "adams.flow.condition.bool.VariableFlagSet -variable-name add_members"
    adams.flow.standalone.SetVariable -var-name add_members -var-value false
    adams.flow.source.EnterManyValues -name "Add team member" -value "adams.flow.source.valuedefinition.UFDLUserList -name member -display Member" -value "adams.flow.source.valuedefinition.EnumValueDefinition -name permission -display Permission -help \"The permissions to give to the team member (read/write/admin)\" -enum-class com.github.waikatoufdl.ufdl4j.action.Permissions" -output-type MAP
    adams.flow.transformer.MapToVariables
    adams.flow.transformer.UFDLExtractAndTransfer -name member_pk -source member -target member_pk
    adams.flow.control.Trigger -name add
     adams.flow.source.StorageValue -storage-name team -conversion adams.data.conversion.UnknownToUnknown
     adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.AddTeamMember -member @{member_pk} -permissions @{permission}" -use-error-queue true
     adams.flow.sink.CallableSink -callable Info
    adams.flow.control.IfThenElse -name "add more?" -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to add more team members?\""
     adams.flow.transformer.SetVariable -name then -var-name add_members -var-value true
     adams.flow.transformer.SetVariable -name else -var-name add_members -var-value false
 adams.flow.standalone.UFDLConnection
 adams.flow.standalone.SetVariable -name initialize -var-name show_main_menu -var-value true
 adams.flow.standalone.QueueInit -storage-name errors
 adams.flow.standalone.SetVariable -name "log file" -var-name logfile -var-value @{flow_filename_long}.log -value-type FILE_FORWARD_SLASHES -expand-value true
 adams.flow.standalone.Rats
  adams.flow.standalone.Rat -name "error queue" -receiver "adams.flow.standalone.rats.input.DeQueue -storage-name errors" -transmitter adams.flow.standalone.rats.output.DummyOutput -log-generator adams.flow.standalone.rats.log.LogEntryGenerator -scope-handling-variables COPY -scope-handling-storage SHARE
   adams.flow.control.Tee -name "get error"
    adams.flow.transformer.Convert -conversion adams.data.conversion.TextContainerToString
    adams.flow.transformer.StringIndent -indentation " " -num-times 4
    adams.flow.transformer.SetVariable -var-name error
   adams.flow.control.Tee -name "get actor"
    adams.flow.transformer.GetReportValue -field Actor[S]
    adams.flow.transformer.SetVariable -var-name actor
   adams.flow.control.Tee -name "get action"
    adams.flow.transformer.GetReportValue -field Action[S]
    adams.flow.transformer.SetVariable -var-name action
   adams.flow.control.Tee -name "get timestamp"
    adams.flow.transformer.GetReportValue -field Timestamp[S]
    adams.flow.transformer.SetVariable -var-name timestamp
   adams.flow.control.Trigger -name "add to log file"
    adams.flow.source.CombineVariables -expression "\\n@{timestamp}\\n  actor: @{actor}\\n  action: @{action}\\n  error: \\n@{error}" -conversion adams.data.conversion.StringToString
    adams.flow.sink.DumpFile -output @{logfile} -append true
   adams.flow.control.Trigger -name "display error"
    adams.flow.source.CombineVariables -expression "@{timestamp}\\n  actor: @{actor}\\n  action: @{action}\\n  error: \\n@{error}" -conversion adams.data.conversion.StringToString
    adams.flow.sink.CallableSink -callable Errors
 adams.flow.source.Start
 adams.flow.transformer.SetVariable -name reset -var-name superuser -var-value false
 adams.flow.control.Trigger -name admin?
  adams.flow.source.UFDLSource -action adams.flow.source.ufdl.CurrentUser -use-error-queue true
  adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLUserToSpreadSheet
  adams.flow.transformer.SpreadSheetGetCell -col superuser
  adams.flow.transformer.SetVariable -var-name superuser
 adams.flow.control.ConditionalTee -name "stop flow if not superuser" -condition "adams.flow.condition.bool.Expression -expression \"@{superuser} != true\""
  adams.flow.control.Stop -stop-msg "Only a UFDL superuser can manage the backend!"
 adams.flow.control.WhileLoop -name menu -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_main_menu"
  adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
  adams.flow.source.Start
  adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
  adams.flow.control.Trigger -name "menu prompt"
   adams.flow.source.EnterValue -name "Main menu" -message "Backend administration" -selection-values "CUDA versions" -selection-values "Docker images" -selection-values Frameworks -selection-values "Hardware generations" -selection-values Jobs -selection-values "Job templates" -selection-values Licenses -selection-values Nodes -selection-values "Pretrained models" -selection-values Projects -selection-values Teams -selection-values Users -selection-values "Clear output" -selection-values Exit -use-buttons true -vertical-buttons true
   adams.flow.transformer.SetVariable -var-name main_choice
   adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
  adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
  adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Users\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Teams\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Projects\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Licenses\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"CUDA versions\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Docker images\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Frameworks\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Hardware generations\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Jobs\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Job templates\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Nodes\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Pretrained models\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{main_choice}\\\\\\\" = \\\\\\\"Exit\\\\\\\"\"" -lenient true
   adams.flow.control.Trigger -name Users
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "User menu" -message "Please select user operation" -selection-values List -selection-values Add -selection-values Update -selection-values Password -selection-values Delete -selection-values Reinstate -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Update\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Password\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Reinstate\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListUsers -active NOT_SET" -use-error-queue true
       adams.flow.sink.CallableSink -callable Current
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListUsers -active NOT_SET" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-user-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add user" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name username -display \"User name\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name password -display Password -type PASSWORD_PLAIN" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name first_name -display \"First name\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name last_name -display \"Last name\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name email -display Email" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateUser -user-name @{username} -password @{password} -first-name @{first_name} -last-name @{last_name} -email @{email}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Update
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-user-update.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select license to update" -value "adams.flow.source.valuedefinition.UFDLUserList -name user -display User" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name user_pk -source user -target user_pk
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "current values to variables"
        adams.flow.source.Variable -var-name user_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadUser -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name user
        adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLUserToSpreadSheet
        adams.flow.transformer.SpreadSheetVariableRowIterator
       adams.flow.control.Trigger -name "new values"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Update user" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name username -display \"New user name\" -default-value @{username}" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name first_name -display \"New first name\" -default-value @{first_name}" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name last_name -display \"New last name\" -default-value @{last_name}" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name email -display \"New email\" -default-value @{email}" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.Block -name "block if cancelled (2)" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "update and display"
        adams.flow.source.StorageValue -storage-name user -conversion adams.data.conversion.UnknownToUnknown
        adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdateUser -user-name @{username} -first-name @{first_name} -last-name @{last_name} -email @{email}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Password
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-user-password.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select license to update" -value "adams.flow.source.valuedefinition.UFDLUserList -name user -display User" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name user_pk -source user -target user_pk
       adams.flow.control.Trigger -name "new values"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Update user" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name password -display \"New password\" -type PASSWORD_PLAIN" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.Trigger -name "update and display"
        adams.flow.source.Variable -var-name user_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdatePassword -password @{password}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select users"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLUserChooser -name users -display Users -multi-selection true" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name hard_delete -display \"Hard delete?\" -type BOOLEAN -default-value false" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -source users -target users_pk
       adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name delete
        adams.flow.source.StringConstants -output-array true -string @{users_pk} -conversion adams.data.conversion.StringToInt
        adams.flow.control.Tee -name "# users"
         adams.flow.transformer.ArrayLength
         adams.flow.transformer.SetVariable -var-name num_items
        adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} user(s)?\""
         adams.flow.transformer.ArrayToSequence
         adams.flow.transformer.SetVariable -var-name pk
         adams.flow.control.Trigger -name delete
          adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
          adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.DeleteUser -hard @{hard_delete}" -use-error-queue true
          adams.flow.transformer.SetVariable -var-name success
          adams.flow.control.Trigger -name info
           adams.flow.source.CombineVariables -expression "deleted user @{pk}: @{success}" -conversion adams.data.conversion.StringToString
           adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Reinstate
       adams.flow.source.Start
       adams.flow.control.Trigger -name "any users to reinstate?"
        adams.flow.standalone.SetVariable -name reset -var-name num_items -var-value 0
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListUsers -active FALSE" -use-error-queue true
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -name set -var-name num_items
       adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"@{num_items} = 0\""
        adams.flow.control.Trigger -name then
         adams.flow.source.CombineVariables -expression "No users available that can be reinstated!" -conversion adams.data.conversion.StringToString
         adams.flow.sink.InformationDialog -title "Reinstating users"
        adams.flow.control.Sequence -name else
         adams.flow.control.Trigger -name "select users"
          adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
          adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLUserChooser -name users -display Users -multi-selection true -active FALSE" -output-type MAP
          adams.flow.transformer.MapToVariables
          adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
          adams.flow.transformer.UFDLExtractAndTransfer -source users -target users_pk
         adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
         adams.flow.control.Trigger -name reinstate
          adams.flow.source.StringConstants -output-array true -string @{users_pk} -conversion adams.data.conversion.StringToInt
          adams.flow.control.Tee -name "# users"
           adams.flow.transformer.ArrayLength
           adams.flow.transformer.SetVariable -var-name num_items
          adams.flow.control.ConditionalTee -name reinstate? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to reinstate @{num_items} user(s)?\""
           adams.flow.transformer.ArrayToSequence
           adams.flow.transformer.SetVariable -var-name pk
           adams.flow.control.Trigger -name reinstate
            adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
            adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.ReinstateUser -use-error-queue true
            adams.flow.transformer.SetVariable -var-name success
            adams.flow.control.Trigger -name info
             adams.flow.source.CombineVariables -expression "reinstated user @{pk}: @{success}" -conversion adams.data.conversion.StringToString
             adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Teams
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Teams menu" -message "Please select team operation" -selection-values List -selection-values Add -selection-values Update -selection-values "Add team members" -selection-values "Remove team members" -selection-values Delete -selection-values Reinstate -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Update\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add team members\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Remove team members\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Reinstate\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListTeams -state ANY -resolve-ids true" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No teams available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListTeams -state ANY" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-team-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add team" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateTeam -name @{name}" -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name team
        adams.flow.sink.CallableSink -callable Info
       adams.flow.transformer.CallableTransformer -callable "add team members"
       adams.flow.control.Trigger -name display
        adams.flow.source.StorageValue -storage-name team -conversion adams.data.conversion.UnknownToUnknown
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Update
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select team"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-team-update.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select team to update" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -state ANY" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
       adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "current values to variables"
        adams.flow.source.Variable -var-name team_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadTeam -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name team
        adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLTeamToSpreadSheet
        adams.flow.transformer.SpreadSheetVariableRowIterator
       adams.flow.control.Trigger -name "prompt for new values"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Update project" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display \"New name\" -default-value @{name}" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.Block -name "Block (2)" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "update and display"
        adams.flow.source.StorageValue -storage-name team -conversion adams.data.conversion.UnknownToUnknown
        adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdateTeam -name @{name}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name "Add team members"
       adams.flow.source.Start
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select team and members" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -help \"the team to add members to\"" -value "adams.flow.source.valuedefinition.UFDLUserChooser -name users -display Users -help \"the team members to add\" -multi-selection true" -value "adams.flow.source.valuedefinition.EnumValueDefinition -name permissions -display Permissions -help \"The permissions for the team members\" -enum-class com.github.waikatoufdl.ufdl4j.action.Permissions" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name users_pk -source users -target users_pk
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "add team members"
        adams.flow.source.StringConstants -output-array true -string @{users_pk} -conversion adams.data.conversion.StringToInt
        adams.flow.control.Tee -name "# users"
         adams.flow.transformer.ArrayLength
         adams.flow.transformer.SetVariable -var-name num_items
        adams.flow.control.ConditionalTrigger -name add? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to add @{num_items} team member(s)?\""
         adams.flow.source.Variable -var-name team_pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.AddTeamMember -member @{users_pk} -permissions @{permissions}" -use-error-queue true
         adams.flow.control.Tee -name info
          adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
          adams.flow.transformer.StringInsert -position first -value "team members added: "
          adams.flow.sink.CallableSink -callable Info
       adams.flow.control.Trigger -skip true
        adams.flow.source.Start
        adams.flow.control.Trigger -name "select team"
         adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
         adams.flow.source.EnterManyValues -name "Select team" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -help \"the team to remove members from\"" -output-type MAP
         adams.flow.transformer.MapToVariables
         adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
         adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
        adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
        adams.flow.control.Trigger -name "select team members"
         adams.flow.source.Variable -var-name team_pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadTeam -use-error-queue true
         adams.flow.transformer.SetStorageValue -storage-name team
        adams.flow.transformer.CallableTransformer -callable "add team members"
        adams.flow.control.Trigger -name display
         adams.flow.source.Variable -var-name team_pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadTeam -use-error-queue true
         adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name "Remove team members"
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select team"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select team" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -help \"the team to remove members from\"" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "select team members"
        adams.flow.source.Variable -var-name team_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadTeam -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name team
        adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLTeamToSpreadSheet
        adams.flow.transformer.SpreadSheetGetCell -col members
        adams.flow.control.Tee -name "any members?"
         adams.flow.transformer.StringTrim
         adams.flow.transformer.StringLength
         adams.flow.transformer.SetVariable -var-name length
        adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"@{length} = 0\""
         adams.flow.control.Trigger -name then
          adams.flow.source.CombineVariables -expression "Team has no members!" -conversion adams.data.conversion.StringToString
          adams.flow.sink.InformationDialog
         adams.flow.control.Sequence -name else
          adams.flow.transformer.StringSplit -expression ,
          adams.flow.control.ArrayProcess
           adams.flow.transformer.StringTrim
          adams.flow.transformer.SelectArraySubset -message "Select members to remove"
          adams.flow.transformer.ArrayToSequence
          adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadUser -use-error-queue true
          adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLUserToSpreadSheet
          adams.flow.transformer.SpreadSheetGetCell -col pk
          adams.flow.transformer.SetVariable -var-name member
          adams.flow.control.Trigger -name remove
           adams.flow.source.StorageValue -storage-name team -conversion adams.data.conversion.UnknownToUnknown
           adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.RemoveTeamMember -member @{member}" -use-error-queue true
           adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select teams"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLTeamChooser -name teams -display Teams -multi-selection true -state ANY" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name hard_delete -display \"Hard delete?\" -type BOOLEAN -default-value false" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -source teams -target teams_pk
       adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name delete
        adams.flow.source.StringConstants -output-array true -string @{teams_pk} -conversion adams.data.conversion.StringToInt
        adams.flow.control.Tee -name "# teams"
         adams.flow.transformer.ArrayLength
         adams.flow.transformer.SetVariable -var-name num_items
        adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} team(s)?\""
         adams.flow.transformer.ArrayToSequence
         adams.flow.transformer.SetVariable -var-name pk
         adams.flow.control.Trigger -name delete
          adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
          adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.DeleteTeam -hard @{hard_delete}" -use-error-queue true
          adams.flow.transformer.SetVariable -var-name success
          adams.flow.control.Trigger -name info
           adams.flow.source.CombineVariables -expression "deleted team @{pk}: @{success}" -conversion adams.data.conversion.StringToString
           adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Reinstate
       adams.flow.source.Start
       adams.flow.control.Trigger -name "any teams to reinstate?"
        adams.flow.standalone.SetVariable -name reset -var-name num_items -var-value 0
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListTeams -state DELETED" -use-error-queue true
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -name set -var-name num_items
       adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"@{num_items} = 0\""
        adams.flow.control.Trigger -name then
         adams.flow.source.CombineVariables -expression "No teams available that can be reinstated!" -conversion adams.data.conversion.StringToString
         adams.flow.sink.InformationDialog -title "Reinstating users"
        adams.flow.control.Sequence -name else
         adams.flow.control.Trigger -name "select teams"
          adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
          adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLTeamChooser -name teams -display Teams -multi-selection true -state DELETED" -output-type MAP
          adams.flow.transformer.MapToVariables
          adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
          adams.flow.transformer.UFDLExtractAndTransfer -source teams -target teams_pk
         adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
         adams.flow.control.Trigger -name reinstate
          adams.flow.source.StringConstants -output-array true -string @{teams_pk} -conversion adams.data.conversion.StringToInt
          adams.flow.control.Tee -name "# teams"
           adams.flow.transformer.ArrayLength
           adams.flow.transformer.SetVariable -var-name num_items
          adams.flow.control.ConditionalTee -name reinstate? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to reinstate @{num_items} team(s)?\""
           adams.flow.transformer.ArrayToSequence
           adams.flow.transformer.SetVariable -var-name pk
           adams.flow.control.Trigger -name reinstate
            adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
            adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.ReinstateTeam -use-error-queue true
            adams.flow.transformer.SetVariable -var-name success
            adams.flow.control.Trigger -name info
             adams.flow.source.CombineVariables -expression "reinstated team @{pk}: @{success}" -conversion adams.data.conversion.StringToString
             adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Projects
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Projects menu" -message "Please select project operation" -selection-values List -selection-values Add -selection-values Update -selection-values Delete -selection-values Reinstate -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Update\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Reinstate\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListProjects -state ANY -resolve-ids true" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No projects available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListProjects -state ANY" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-project-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add project" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -help \"the team that the project will belong to\"" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateProject -name @{name} -team @{team_pk}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Update
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select project"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-project-update.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select project to update" -value "adams.flow.source.valuedefinition.UFDLProjectList -name project -display Project" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name project_pk -source project -target project_pk
       adams.flow.control.Trigger -name "current values to variables"
        adams.flow.source.Variable -var-name project_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadProject -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name project
        adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLProjectToSpreadSheet
        adams.flow.transformer.SpreadSheetVariableRowIterator
        adams.flow.control.Trigger -name team
         adams.flow.source.Variable -var-name team -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadTeam -use-error-queue true
         adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLTeamToListItem
         adams.flow.transformer.SetVariable -var-name team
       adams.flow.control.Trigger -name "prompt for new values"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Update project" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display \"New name\" -default-value @{name}" -value "adams.flow.source.valuedefinition.UFDLTeamList -name team -display Team -sorting BY_DESCRIPTION_CASE_SENSITIVE -default-value @{team}" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name team_pk -source team -target team_pk
       adams.flow.control.Trigger -name "update and display"
        adams.flow.source.StorageValue -storage-name license -conversion adams.data.conversion.UnknownToUnknown
        adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdateProject -name @{name} -team @{team_pk}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select projects"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLProjectChooser -name projects -display Projects -multi-selection true -state ANY" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name hard_delete -display \"Hard delete?\" -type BOOLEAN -default-value false" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -source projects -target projects_pk
       adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name delete
        adams.flow.source.StringConstants -output-array true -string @{projects_pk} -conversion adams.data.conversion.StringToInt
        adams.flow.control.Tee -name "# projects"
         adams.flow.transformer.ArrayLength
         adams.flow.transformer.SetVariable -var-name num_items
        adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} project(s)?\""
         adams.flow.transformer.ArrayToSequence
         adams.flow.transformer.SetVariable -var-name pk
         adams.flow.control.Trigger -name delete
          adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
          adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.DeleteProject -hard @{hard_delete}" -use-error-queue true
          adams.flow.transformer.SetVariable -var-name success
          adams.flow.control.Trigger -name info
           adams.flow.source.CombineVariables -expression "deleted project @{pk}: @{success}" -conversion adams.data.conversion.StringToString
           adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Reinstate
       adams.flow.source.Start
       adams.flow.control.Trigger -name "any projects to reinstate?"
        adams.flow.standalone.SetVariable -name reset -var-name num_items -var-value 0
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListProjects -state DELETED" -use-error-queue true
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -name set -var-name num_items
       adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"@{num_items} = 0\""
        adams.flow.control.Trigger -name then
         adams.flow.source.CombineVariables -expression "No projects available that can be reinstated!" -conversion adams.data.conversion.StringToString
         adams.flow.sink.InformationDialog -title "Reinstating users"
        adams.flow.control.Sequence -name else
         adams.flow.control.Trigger -name "select projects"
          adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
          adams.flow.source.EnterManyValues -value "adams.flow.source.valuedefinition.UFDLProjectChooser -name projects -display Projects -multi-selection true -state DELETED" -output-type MAP
          adams.flow.transformer.MapToVariables
          adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
          adams.flow.transformer.UFDLExtractAndTransfer -source projects -target projects_pk
         adams.flow.control.Block -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
         adams.flow.control.Trigger -name reinstate
          adams.flow.source.StringConstants -output-array true -string @{projects_pk} -conversion adams.data.conversion.StringToInt
          adams.flow.control.Tee -name "# projects"
           adams.flow.transformer.ArrayLength
           adams.flow.transformer.SetVariable -var-name num_items
          adams.flow.control.ConditionalTee -name reinstate? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to reinstate @{num_items} project(s)?\""
           adams.flow.transformer.ArrayToSequence
           adams.flow.transformer.SetVariable -var-name pk
           adams.flow.control.Trigger -name reinstate
            adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
            adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.ReinstateProject -use-error-queue true
            adams.flow.transformer.SetVariable -var-name success
            adams.flow.control.Trigger -name info
             adams.flow.source.CombineVariables -expression "reinstated project @{pk}: @{success}" -conversion adams.data.conversion.StringToString
             adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Licenses
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "License menu" -message "Please select license operation" -selection-values List -selection-values Add -selection-values Update -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Update\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action adams.flow.source.ufdl.ListLicenses -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No licenses available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action adams.flow.source.ufdl.ListLicenses -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-license-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add license" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name url -display URL" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateLicense -name @{name} -url @{url}" -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name license
        adams.flow.control.Trigger -name domains
         adams.flow.standalone.SetVariable -name init -var-name domains -var-value ""
         adams.flow.source.SelectObjects -name "Select domains" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Domain -short-title true
         adams.flow.control.ArrayProcess
          adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
         adams.flow.transformer.StringJoin -glue " "
         adams.flow.transformer.SetVariable -var-name domains
        adams.flow.control.Trigger -name permissions
         adams.flow.standalone.SetVariable -name init -var-name permissions -var-value ""
         adams.flow.source.SelectObjects -name "Select permissions" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Permission -short-title true
         adams.flow.control.ArrayProcess
          adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
         adams.flow.transformer.StringJoin -glue " "
         adams.flow.transformer.SetVariable -var-name permissions
        adams.flow.control.Trigger -name conditions
         adams.flow.standalone.SetVariable -name init -var-name conditions -var-value ""
         adams.flow.source.SelectObjects -name "Select conditions" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Condition -short-title true
         adams.flow.control.ArrayProcess
          adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
         adams.flow.transformer.StringJoin -glue " "
         adams.flow.transformer.SetVariable -var-name conditions
        adams.flow.control.Trigger -name limitations
         adams.flow.standalone.SetVariable -name init -var-name limitations -var-value ""
         adams.flow.source.SelectObjects -name "Select limitations" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Limitation -short-title true
         adams.flow.control.ArrayProcess
          adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
         adams.flow.transformer.StringJoin -glue " "
         adams.flow.transformer.SetVariable -var-name limitations
        adams.flow.control.Trigger -name display
         adams.flow.source.StorageValue -storage-name license -conversion adams.data.conversion.UnknownToUnknown
         adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdateLicenseSubDescriptors -domain @{domains} -permission @{permissions} -condition @{conditions} -limitation @{limitations}" -use-error-queue true
         adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Update
       adams.flow.source.Start
       adams.flow.control.Trigger -name "select license"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-license-update.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Select license to update" -value "adams.flow.source.valuedefinition.UFDLLicenseList -name license -display License" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name license_pk -source license -target license_pk
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name "current values to variables"
        adams.flow.source.Variable -var-name license_pk -conversion adams.data.conversion.StringToInt
        adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadLicense -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name license
        adams.flow.transformer.Convert -conversion adams.data.conversion.UFDLLicenseToSpreadSheet
        adams.flow.transformer.SpreadSheetConvertCells -finder "adams.data.spreadsheet.cellfinder.CellRange -columns domains,permissions,conditions,limitations" -conversion "adams.data.conversion.StringExpression -expression \"substitute(X, \\\\\\\",\\\\\\\", \\\\\\\" \\\\\\\")\""
        adams.flow.transformer.SpreadSheetVariableRowIterator
       adams.flow.control.Trigger -name "prompt for new values"
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Update license" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display \"New name\" -default-value @{name}" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name url -display \"New URL\" -default-value @{url}" -output-type MAP
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
        adams.flow.transformer.UFDLExtractAndTransfer -name license_pk -source license -target license_pk
       adams.flow.control.Block -name "block if cancelled (2)" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name domains
        adams.flow.source.SelectObjects -name "Select domains" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Domain -initial-objects @{domains} -short-title true
        adams.flow.control.ArrayProcess
         adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
        adams.flow.transformer.StringJoin -glue " "
        adams.flow.transformer.SetVariable -var-name domains
       adams.flow.control.Trigger -name permissions
        adams.flow.source.SelectObjects -name "Select permissions" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Permission -initial-objects @{permissions} -short-title true
        adams.flow.control.ArrayProcess
         adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
        adams.flow.transformer.StringJoin -glue " "
        adams.flow.transformer.SetVariable -var-name permissions
       adams.flow.control.Trigger -name conditions
        adams.flow.source.SelectObjects -name "Select conditions" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Condition -initial-objects @{conditions} -short-title true
        adams.flow.control.ArrayProcess
         adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
        adams.flow.transformer.StringJoin -glue " "
        adams.flow.transformer.SetVariable -var-name conditions
       adams.flow.control.Trigger -name limitations
        adams.flow.source.SelectObjects -name "Select limitations" -output-array true -super-class com.github.waikatoufdl.ufdl4j.action.Licenses$Limitation -initial-objects @{limitations} -short-title true
        adams.flow.control.ArrayProcess
         adams.flow.transformer.Convert -conversion adams.data.conversion.AnyToString
        adams.flow.transformer.StringJoin -glue " "
        adams.flow.transformer.SetVariable -var-name limitations
       adams.flow.control.Trigger -name "update and display"
        adams.flow.source.StorageValue -storage-name license -conversion adams.data.conversion.UnknownToUnknown
        adams.flow.transformer.UFDLTransformer -name "UFDLTransformer (2)" -action "adams.flow.transformer.ufdl.UpdateLicense -name @{name} -url @{url}" -use-error-queue true
        adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.UpdateLicenseSubDescriptors -domain @{domains} -permission @{permissions} -condition @{conditions} -limitation @{limitations}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -action adams.flow.source.ufdl.ListLicenses -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select licenses to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} license(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteLicense -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted license @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name "CUDA versions"
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "CUDA version menu" -message "Please select CUDA versions operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListCudaVersions -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No CUDA versions available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListCudaVersions -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-cudaversion-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add CUDA version" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name version -display Version" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name full_version -display \"Full version\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name min_driver_version -display \"Minimum driver version\"" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateCudaVersion -version @{version} -full-version @{full_version} -min-driver-version @{min_driver_version}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListCudaVersions -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select CUDA versions to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} CUDA version(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteCudaVersion -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted CUDA version @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name "Docker images"
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Docker image menu" -message "Please select docker image operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListDockerImages -filter adams.data.ufdlfilter.AllFilter -resolve-ids true" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No docker images available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListDockerImages -filter adams.data.ufdlfilter.AllFilter -resolve-ids true" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-dockerimage-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add Docker image" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name version -display Version" -value "adams.flow.source.valuedefinition.UFDLLicenseFilter -name license -display License -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name registry_url -display \"Registry URL\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name registry_username -display \"Registry user name\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name registry_password -display \"Registry password\" -type PASSWORD_PLAIN" -value "adams.flow.source.valuedefinition.UFDLDomainChooser -name domain -display Domain -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name tasks -display Tasks -help \"blank-separated list\"" -value "adams.flow.source.valuedefinition.UFDLCudaVersionChooser -name cuda_version -display \"CUDA version\" -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.UFDLFrameworkChooser -name framework -display Framework -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.UFDLHardwareGenerationChooser -name min_hardware -display \"Minimum hardware generation\" -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name cpu -display \"runs on CPU?\" -type BOOLEAN -default-value false" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.UFDLExtractAndTransfer -name cuda_version_pk -source cuda_version -target cuda_version_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name framework_pk -source framework -target framework_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name min_hardware_pk -source min_hardware -target min_hardware_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name license_pk -source license -target license_pk
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateDockerImage -name @{name} -version @{version} -url @{url} -registry-url @{registry_url} -registry-user @{registry_username} -registry-password @{registry_password} -cuda-version @{cuda_version_pk} -framework @{framework_pk} -domain @{domain} -task @{tasks} -min-hardware-generation @{min_hardware_pk} -cpu @{cpu} -license @{license_pk}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListDockerImages -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select docker images to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} docker image(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteDockerImage -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted docker image @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Frameworks
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Framework menu" -message "Please select framework operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListFrameworks -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No frameworks available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListCudaVersions -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-license-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add CUDA version" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name version -display Version" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name full_version -display \"Full version\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name min_driver_version -display \"Minimum driver version\"" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateCudaVersion -version @{version} -full-version @{full_version} -min-driver-version @{min_driver_version}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListFrameworks -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select frameworks to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} framework(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteFramework -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted framework @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name "Hardware generations"
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Hardware generation menu" -message "Please select Hardware generation operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListHardwareGeneration -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No hardware generations available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListHardwareGeneration -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-hardwaregeneration-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add Hardware generation" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name generation -display Generation" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name min_compute -display \"Minimum compute capability (incl)\" -type DOUBLE -default-value 1" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name max_compute -display \"Maximum compute capability (excl)\" -type DOUBLE -default-value 2" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateHardwareGeneration -generation @{generation} -min-compute-capability @{min_compute} -max-compute-capability @{max_compute}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListHardwareGeneration -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select hardware generations to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} hardware generation(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteHardwareGeneration -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted hardware generation @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Jobs
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Job menu" -message "Please select Job operation" -selection-values List -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListJobs -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No jobs available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListJobs -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select jobs to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} job(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteJob -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted job @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name "Job templates"
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Job template menu" -message "Please select Job template operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListJobTemplates -filter adams.data.ufdlfilter.AllFilter -resolve-ids true" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No job templates available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListJobTemplates -filter adams.data.ufdlfilter.AllFilter -state ANY" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-jobtemplate-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add Job template version" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name version -display Version -type INTEGER -default-value 1" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name description -display Description" -value "adams.flow.source.valuedefinition.ListSelectionValueDefinition -name scope -display Scope -value public -value project -value user -default-value public" -value "adams.flow.source.valuedefinition.UFDLFrameworkChooser -name framework -display Framework -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.UFDLDomainChooser -name domain -display Domain -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name type -display Type -help \"For example: train, predict, export\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name executor -display \"Executor class\" -help \"The Python class that handles this template\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name packages -display \"Required packages\" -help \"Any additional packages to install via pip for running the executor, blank-separated list (eg \\\"numpy<=1.18\\\")\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name template -display Template -help \"The body of the template itself\"" -value "adams.flow.source.valuedefinition.UFDLLicenseFilter -name license -display License -filter adams.data.ufdlfilter.AllFilter" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.UFDLExtractAndTransfer -name framework_pk -source framework -target framework_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name license_pk -source license -target license_pk
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreateJobTemplate -name @{name} -version @{version} -description @{description} -scope @{scope} -framework @{framework_pk} -domain @{domain} -type @{type} -executor-class @{executor} -required-packages @{packages} -template @{template} -license @{license_pk}" -use-error-queue true
        adams.flow.transformer.SetStorageValue -storage-name jobtemplate
        adams.flow.control.Trigger -name "add inputs"
         adams.flow.standalone.SetVariable -name addmore -var-name addmore -var-value true
         adams.flow.source.Start
         adams.flow.control.WhileLoop -condition "adams.flow.condition.bool.Expression -expression \"@{addmore} = true\""
          adams.flow.standalone.SetVariable -name addmore -var-name addmore -var-value true
          adams.flow.source.Start
          adams.flow.control.Trigger -name "prompt user"
           adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
           adams.flow.source.EnterManyValues -name "Add input" -stop-if-canceled true -message "Please enter values for input" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name -help \"The name of the input (lower case)\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name type -display Type -help \"The type of the input (lower case, eg dataset or model)\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name options -display Options -help \"The options for the input, eg wai.annotations options\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name help -display Help -help \"The help string for the input\"" -output-type MAP
           adams.flow.transformer.MapToVariables
           adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
          adams.flow.control.ConditionalTrigger -name add -condition "adams.flow.condition.bool.Expression -expression \"@{cancelled} = false\""
           adams.flow.source.StorageValue -storage-name jobtemplate -conversion adams.data.conversion.UnknownToUnknown
           adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.AddJobTemplateInput -name @{name} -type @{type} -options @{options} -help @{help}" -use-error-queue true
          adams.flow.control.Trigger -name another?
           adams.flow.source.EnterValue -message "Add another input?" -initial-value no -selection-values yes -selection-values no -use-buttons true
           adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"X\\\\\\\" = \\\\\\\"yes\\\\\\\"\""
            adams.flow.transformer.SetVariable -name then -var-name addmore -var-value true
            adams.flow.transformer.SetVariable -name else -var-name addmore -var-value false
        adams.flow.control.Trigger -name "add parameters"
         adams.flow.standalone.SetVariable -name addmore -var-name addmore -var-value true
         adams.flow.source.Start
         adams.flow.control.WhileLoop -condition "adams.flow.condition.bool.Expression -expression \"@{addmore} = true\""
          adams.flow.standalone.SetVariable -name addmore -var-name addmore -var-value true
          adams.flow.source.Start
          adams.flow.control.Trigger -name "prompt user"
           adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
           adams.flow.source.EnterManyValues -name "Add parameter" -stop-if-canceled true -message "Please enter values for parameter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name -help \"The name of the input (lower case)\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name type -display Type -help \"The type of the input (lower case, eg dataset or model)\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name default -display Default -help \"The default value to use\"" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name help -display Help -help \"The help string for the parameter\"" -output-type MAP
           adams.flow.transformer.MapToVariables
           adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
          adams.flow.control.ConditionalTrigger -name add -condition "adams.flow.condition.bool.Expression -expression \"@{cancelled} = false\""
           adams.flow.source.StorageValue -storage-name jobtemplate -conversion adams.data.conversion.UnknownToUnknown
           adams.flow.transformer.UFDLTransformer -action "adams.flow.transformer.ufdl.AddJobTemplateParameter -name @{name} -type @{type} -default @{default} -help @{help}" -use-error-queue true
          adams.flow.control.Trigger -name another?
           adams.flow.source.EnterValue -message "Add another parameter?" -initial-value no -selection-values yes -selection-values no -use-buttons true
           adams.flow.control.IfThenElse -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"X\\\\\\\" = \\\\\\\"yes\\\\\\\"\""
            adams.flow.transformer.SetVariable -name then -var-name addmore -var-value true
            adams.flow.transformer.SetVariable -name else -var-name addmore -var-value false
        adams.flow.control.Trigger -name display
         adams.flow.source.StorageValue -storage-name jobtemplate -conversion adams.data.conversion.UnknownToUnknown
         adams.flow.transformer.UFDLGetPK
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.LoadJobTemplate -use-error-queue true
         adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListJobTemplates -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select Job templates to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} job template(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteJobTemplate -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted job template @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name Nodes
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Node menu" -message "Please select nodes operation" -selection-values List -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListNodes -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No nodes available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListNodes -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select nodes to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} node(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeleteNode -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted node @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Trigger -name "Pretrained models"
    adams.flow.standalone.SetVariable -name initialize -var-name show_sub_menu -var-value true
    adams.flow.source.Start
    adams.flow.control.CloseCallableDisplay -name "close progressbar" -callable ProgressBar
    adams.flow.control.WhileLoop -name "sub menu" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name show_sub_menu"
     adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
     adams.flow.source.Start
     adams.flow.control.Trigger -name "menu prompt"
      adams.flow.source.EnterValue -name "Pretrained model menu" -message "Please select pretrained model operation" -selection-values List -selection-values Add -selection-values Delete -selection-values "Clear output" -selection-values Return -use-buttons true -vertical-buttons true
      adams.flow.transformer.SetVariable -var-name choice
      adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
     adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
     adams.flow.control.Switch -name "menu actions" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"List\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Add\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Delete\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Clear output\\\\\\\"\"" -condition "adams.flow.condition.bool.Expression -expression \"\\\\\\\"@{choice}\\\\\\\" = \\\\\\\"Return\\\\\\\"\"" -lenient true
      adams.flow.control.Trigger -name List
       adams.flow.source.Start
       adams.flow.transformer.SetVariable -var-name none -var-value true
       adams.flow.control.Trigger -name display
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListPretrainedModels -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
        adams.flow.transformer.SetVariable -var-name none -var-value false
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.ConditionalTrigger -name "nothing to list" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name none"
        adams.flow.source.CombineVariables -expression "No pretrained models available yet!" -conversion adams.data.conversion.StringToString
        adams.flow.sink.InformationDialog
      adams.flow.control.Trigger -name Add
       adams.flow.source.Start
       adams.flow.control.Trigger -name current
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.ListPretrainedModels -filter adams.data.ufdlfilter.AllFilter -state ANY" -use-error-queue true
        adams.flow.sink.CallableSink -callable Current
       adams.flow.control.Trigger -name "prompt user"
        adams.flow.standalone.SetVariable -name "restore file" -var-name restore -var-value @{flow_filename_long}-pretrainedmodel-add.props -value-type FILE_FORWARD_SLASHES -expand-value true
        adams.flow.standalone.SetVariable -name reset -var-name cancelled -var-value true
        adams.flow.source.EnterManyValues -name "Add Pretrained model" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name name -display Name" -value "adams.flow.source.valuedefinition.UFDLFrameworkChooser -name framework -display Framework -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.UFDLDomainChooser -name domain -display Domain -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.UFDLLicenseFilter -name license -display License -filter adams.data.ufdlfilter.AllFilter" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name url -display URL" -value "adams.flow.source.valuedefinition.DefaultValueDefinition -name description -display Description" -output-type MAP -restoration-enabled true -restoration-file @{restore}
        adams.flow.transformer.MapToVariables
        adams.flow.transformer.UFDLExtractAndTransfer -name framework_pk -source framework -target framework_pk
        adams.flow.transformer.UFDLExtractAndTransfer -name license_pk -source license -target license_pk
        adams.flow.transformer.SetVariable -name set -var-name cancelled -var-value false
       adams.flow.control.CloseCallableDisplay -name "close current" -callable Current
       adams.flow.control.Block -name "block if cancelled" -condition "adams.flow.condition.bool.VariableFlagSet -variable-name cancelled"
       adams.flow.control.Trigger -name add
        adams.flow.source.UFDLSource -action "adams.flow.source.ufdl.CreatePretrainedModel -name @{name} -framework @{framework_pk} -domain @{domain} -license @{license_pk} -url @{url} -description @{description}" -use-error-queue true
        adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Trigger -name Delete
       adams.flow.source.UFDLSource -silent true -action "adams.flow.source.ufdl.ListPretrainedModels -filter adams.data.ufdlfilter.AllFilter" -use-error-queue true
       adams.flow.transformer.SpreadSheetSelectSubset -message "Please select pretrained models to delete" -allow-search true
       adams.flow.control.Tee -name "# items"
        adams.flow.transformer.SpreadSheetInfo
        adams.flow.transformer.SetVariable -var-name num_items
       adams.flow.control.ConditionalTee -name delete? -condition "adams.flow.condition.bool.PromptUser -message \"Do you want to delete @{num_items} pretrained model(s)?\""
        adams.flow.transformer.SpreadSheetVariableRowIterator -columns pk
        adams.flow.control.Trigger -name delete
         adams.flow.source.Variable -var-name pk -conversion adams.data.conversion.StringToInt
         adams.flow.transformer.UFDLTransformer -action adams.flow.transformer.ufdl.DeletePretrainedModel -use-error-queue true
         adams.flow.transformer.SetVariable -var-name success
         adams.flow.control.Trigger -name info
          adams.flow.source.CombineVariables -expression "deleted pretrained model @{pk}: @{success}" -conversion adams.data.conversion.StringToString
          adams.flow.sink.CallableSink -callable Info
      adams.flow.control.Tee -name "Clear output"
       adams.flow.transformer.CallableTransformer -callable "clear output"
      adams.flow.control.Tee -name Return
       adams.flow.transformer.CallableTransformer -callable "clear output"
       adams.flow.transformer.SetVariable -var-name show_sub_menu -var-value false
   adams.flow.control.Tee -name "Clear output"
    adams.flow.transformer.CallableTransformer -callable "clear output"
   adams.flow.control.Tee -name Exit
    adams.flow.transformer.CallableTransformer -callable "clear output"
    adams.flow.transformer.SetVariable -var-name show_main_menu -var-value false